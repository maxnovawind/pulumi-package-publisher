name: 'Pulumi Package publisher'
description: 'A GitHub Action that publishes provider SDKs'
inputs:
  nodejs:
    description: Publish to npm
    required: false
  java:
    description: Publish to Maven
    required: false
  dotnet:
    description: Publish to Nuget
    required: false
  python:
    description: Publish to PyPI
    required: false
runs:
  using: "composite"
  steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
    - name: Checkout Scripts Repo
      uses: actions/checkout@v3
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
      shell: bash
    - name: Install Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GOVERSION }}
    - name: Install pulumictl
      uses: jaxxstorm/action-install-gh-release@v1.5.0
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: pulumi/action-install-pulumi-cli@v2
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODEVERSION }}
        registry-url: https://registry.npmjs.org
    - name: Download nodejs SDK
      uses: actions/download-artifact@v2
      with:
        name: nodejs-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress nodejs SDK
      run: tar -zxf ${{ github.workspace }}/sdk/nodejs.tar.gz -C
        ${{ github.workspace }}/sdk/nodejs
      shell: bash
    - name: Publish Node
      env:
        NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
        NO_TFGEN_PYTHON_PACKAGE: skip-python-publishing
      run: ./ci-scripts/ci/publish-tfgen-package ${{ github.workspace }}
      shell: bash
    - name: Setup DotNet
      if: ${{ inputs.dotnet }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNETVERSION }}
    - name: Download dotnet SDK
      uses: actions/download-artifact@v2
      with:
        name: dotnet-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress dotnet SDK
      run: tar -zxf ${{ github.workspace }}/sdk/dotnet.tar.gz -C
        ${{ github.workspace }}/sdk/dotnet
      shell: bash
    - name: Publish nodejs SDK
      run: if [ -n "${NUGET_PUBLISH_KEY}" ]; then
        find "${SOURCE_ROOT}/sdk/dotnet/bin/Debug/" -name 'Pulumi.*.nupkg'
        -exec dotnet nuget push -k "${NUGET_PUBLISH_KEY}" -s https://api.nuget.org/v3/index.json {} ';'
        fi
      shell: bash
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHONVERSION }}
    - name: Download python SDK
      uses: actions/download-artifact@v2
      with:
        name: python-sdk.tar.gz
        path: ${{ github.workspace }}/sdk/
    - name: Uncompress python SDK
      run: tar -zxf ${{ github.workspace }}/sdk/python.tar.gz -C
        ${{ github.workspace }}/sdk/python
      shell: bash
    - name: Install Twine
      run: python -m pip install pip twine
      shell: bash
    - name: Publish Python SDK
      run: if [ -n "${PYPI_USERNAME}" ] ; then
        PYPI_PUBLISH_USERNAME=${PYPI_USERNAME}
        else
        PYPI_PUBLISH_USERNAME="pulumi"
        fi
        echo "Publishing Pip package to pypi as ${PYPI_PUBLISH_USERNAME}:"
        twine upload \
        -u "${PYPI_PUBLISH_USERNAME}" -p "${PYPI_PASSWORD}" \
        "${SOURCE_ROOT}/sdk/python/bin/dist/*.tar.gz" \
        --skip-existing \
        --verbose
      shell: bash

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        cache: gradle
        distribution: temurin
        java-version: ${{ env.JAVAVERSION }}
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: "7.6"
    - name: Download java SDK
      uses: actions/download-artifact@v2
      with:
        name: java-sdk.tar.gz
        path: ${{ github.workspace}}/sdk/
    - name: Uncompress java SDK
      run: tar -zxf ${{github.workspace}}/sdk/java.tar.gz -C
        ${{github.workspace}}/sdk/java
      shell: bash
    - name: Set PACKAGE_VERSION to Env
      run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
        $GITHUB_ENV
      shell: bash
    - name: Publish Java SDK
      continue-on-error: true
      uses: gradle/gradle-build-action@9b814496b50909128c6a52622b416c5ffa04db49
      with:
        arguments: publishToSonatype closeAndReleaseSonatypeStagingRepository
        build-root-directory: ./sdk/java
        gradle-version: 7.4.1
    - name: Notify success
      env:
        SLACK_CHANNEL: provider-upgrade-status
        SLACK_COLOR: "#00FF00"
        SLACK_MESSAGE: |-
          Publish succeeded :heart_decoration:
        SLACK_TITLE: ${{ github.event.repository.name }} Publish result
        SLACK_USERNAME: provider-bot
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ":taco:"
      uses: rtCamp/action-slack-notify@v2
    - name: Notify failure
      env:
        SLACK_CHANNEL: provider-upgrade-status
        SLACK_COLOR: "#FF0000"
        SLACK_MESSAGE: |-
          Publish failed :x:
        SLACK_TITLE: ${{ github.event.repository.name }} upgrade result
        SLACK_USERNAME: provider-bot
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ":taco:"
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
